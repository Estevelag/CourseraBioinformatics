def Hammingdist(seq1,seq2):
    dist=0
    for i in range(0,len(seq1)):
        if seq1[i]!= seq2[i]:
            dist=dist+1
    return dist
profile = {

    'A': [0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.9, 0.1, 0.1, 0.1, 0.3, 0.0],
    'C': [0.1, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4, 0.1, 0.2, 0.4, 0.6],
    'G': [0.0, 0.0, 1.0, 1.0, 0.9, 0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],
    'T': [0.7, 0.2, 0.0, 0.0, 0.1, 0.1, 0.0, 0.5, 0.8, 0.7, 0.3, 0.4]
}
B='TCGTGGATTTCC'
A=profile['T'][0]
for i in range(1,len(B)):
    A=A*profile[B[i]][i]
#print(A)

D="""0.2 0.2 0.3 0.2 0.3
0.4 0.3 0.1 0.5 0.1
0.3 0.3 0.5 0.2 0.4
0.1 0.2 0.1 0.1 0.2"""
D=D.split("\n")
A=[]
for i in D:
    A.append(i.split(" "))
#convert to float
diction={"A": [0],
    "C": [1],
    "G": [2],
    "T": [3]}
#print(diction["C"][0])

def Profilemostprob(Text,k,Matrix):
    Matrix=Matrix.split("\n")
    A=[]
    diction={'A': [0],
    'C': [1],
    'G': [2],
    'T': [3]}
    prob=[]
    for i in Matrix:
        A.append(i.split(" "))
        #Ive got the matrix now of probs A
    for i in range(0,len(Text)-k+1):
        B=diction[Text[i]][0]
        P=float(A[B][0])
        D=Text[i+1:i+k]
        for c in range(0,len(D)):
            H=diction[D[c]][0]
            P=P*float(A[H][c+1])
        prob.append(P)
    pos=int(prob.index(max(prob)))
    return Text[pos:pos+k]

def Profilemostprob1(Text,k,A):
    diction={'A': [0],
    'C': [1],
    'G': [2],
    'T': [3]}
    prob=[]
    for i in range(0,len(Text)-k+1):
        B=diction[Text[i]][0]
        P=float(A[B][0])
        D=Text[i+1:i+k]
        for c in range(0,len(D)):
            H=diction[D[c]][0]
            P=P*float(A[H][c+1])
        prob.append(P)
    pos=int(prob.index(max(prob)))
    return Text[pos:pos+k]
#print(Profilemostprob("GAGATCTCAGGTACTCCTAGAATACAAACTCCAGAATGTCCGAGCAGCAATACGTTGGGTGAGGTAACTCGTAGATATGGAACAATTACGGCCTTCGGCGCCTTATGTGGCGCAGCCCTCATACCTGTTACCTGGCAGTGCAATTCGCGAAAGCTGCTGCGGTTCCATGAGTGATGCGGGGACCGTGCTTGCTCGGTATACGACACGCACCGGCCGGGAGCGTCCCACGATCTGGACACTGTTCCAGAGGTATAATTGCATCAGGGCCAATTGCGCCCTGACTTAGGCTAAGGCAATCCGGTTCTATCGGTACACTCACGAGAATCCCCCAGTATGTCATAGTTGATGTTGCCTACTTCTCCATTTACGAAACCGTTGGTCTTACGGGCCACACCCCGTGCAGAACTGAACGCATATGACGTACAATAGGATTCCACCCATTCACTTTTTTGGCAGAGTCACCTTAGCACTCTTAACCCTAAATGGTAGATCACCTGCACTCCGTTCGGTAATTTCGACCATGATTAAGTCAGGTTTATGTTGTTGAGGCTGAATCGGAAGCAGAAGGGCAGAAATATTCGTCAACTAATATATAGGACTCTTTAGGGAATGTAAGGGGTCGCACGAGGCTGGTATCATCGCGTGGTTAGTCAGGGGAGCGTTCAAGCTAAGTCAGACCGCCAGGTCACATTGGTTAATTAATACTCTGTACTAACGACAACTCCCGGGCTCACTGGCAGAAATTCCGGCATAAAAATGATGAACCCTAATTCAGTTGCGGTGCTCTCTGCAGATGGAGGGATAAGCAATTACGATCCCATTACCCGGCAGAAATAGGTATATCGGGTTCCTCCTTGGGTCTCGGTATCTCTCGCTAGGCCCCCCCAAACTCCGATCACACTTGCGTCGGGTGTGACGGTCCGGTTATAGATAGGAGGGGGTCCTAAGGGCTATCCATGGGCTCGCAGGTTTGCAATTCTTGAGCCCGACCTCGATCATG",12,"""0.289 0.253 0.349 0.169 0.229 0.241 0.193 0.277 0.181 0.313 0.253 0.241

def createprofilematL(motifs):
    diction={'A': [0],
    'C': [1],
    'G': [2],
    'T': [3]}
    Matrix = [[0 for x in range(len(motifs[0]))] for y in range(4)]
    for i in motifs:
        for j in range(0,len(i)):
            fila=diction[i[j]][0]
            Matrix[fila][j]= Matrix[fila][j] + 1
    for i in range(0,len(Matrix)):#Laplace correction
        for j in range(0,len(Matrix[i])):
            Matrix[i][j]=Matrix[i][j]+1
    return Matrix

def createprofilemat(motifs):
    diction={'A': [0],
    'C': [1],
    'G': [2],
    'T': [3]}
    Matrix = [[0 for x in range(len(motifs[0]))] for y in range(4)]
    for i in motifs:
        for j in range(0,len(i)):
            fila=diction[i[j]][0]
            Matrix[fila][j]= Matrix[fila][j] + 1
    return Matrix


def normprofmat(Matrix): 
    Sum=[]
    for i in range(0,len(Matrix[0])):
        Sum.append(Matrix[0][i]+Matrix[1][i]+Matrix[2][i]+Matrix[3][i])
    for i in range(0,len(Matrix)):
        for j in range(0,len(Matrix[0])):
            Matrix[i][j]=Matrix[i][j]/Sum[j]
    return Matrix

def scorematrix(Matrix):
    score=[]
    Sum=[]
    for i in range(0,len(Matrix[0])):
        Sum.append(Matrix[0][i]+Matrix[1][i]+Matrix[2][i]+Matrix[3][i])
    Max=[]
    for i in range(0,len(Matrix[0])):
        Max.append(max([Matrix[0][i],Matrix[1][i],Matrix[2][i],Matrix[3][i]]))
    for i in range(0,len(Max)):
        score.append(Sum[i]-Max[i])
    return sum(score)



#print(scorematrix(createprofilemat(["TCGGGGGTTTTT",


def Greedymotifsearch(Dna,k,t):
    Dna=Dna.split("\n")
    bestmotifs=[]
    for i in range(0,len(Dna)):
        bestmotifs.append(Dna[i][0:k])
    for i in range(0,len(Dna[0])-k+1):
        Motif=[Dna[0][i:i+k]]
        for j in range(1,len(Dna)):
            A=normprofmat(createprofilematL(Motif))
            Motif.append(Profilemostprob1(Dna[j],k,A))
        if scorematrix(createprofilemat(Motif)) < scorematrix(createprofilemat(bestmotifs)):
            bestmotifs=Motif
    return bestmotifs

print(*Greedymotifsearch("""GAGGAATCATGGTGACTCAAGTGATAGAAGCCGCGATCAAGACCATCCGCGTCAAATTAGGGTACACCGAGTTCGGACGGTCAAAGGTGGCGGAATCGCATATCCCTAAGAGTCCGTTATTCCGCTCATACCAATTCACCTAAAGCCTGGTCCTCC
TTTGTGAGTTGTGACATGCCTAGGTGTGCTACAGCCATCTGGTGCTCCGACTTTCTGCTCCAGAGTTAAGCTGTCAGCCGAAGCCGTTGCTCGCAACTCCAAGCACCTGTGGAGTAGTGCCTTGCCTCGCGGAGGGCCACAATGATGGGGATCTAA
CACAACACCCGTCTACAGTATTGAGGATCGGCGGTGACACATAGGGAATGTGGACAAGAAGCCTGGTGCTCCGAGTATCTAGGTAGAAATCTCCTCTACTCCTGCCAATTATGTTTTGCCCACCCCTGTGTTACATTGAGCCTCCCAAGCGATTTC
CGGTGACTAATCATGTACTATAGAAGCTTGGCATTTAAGGCTTGAATCACCTCGTGCTCCTTTTAAATTGGAAATCGATATCGGTACGAAGTCAGTCGCCTACATCTAAAGCCTCCCCGCCCCTTTATATCTCGTTATTTGAATACCCGATTATTG
ACAGATCCCATTAACGTGACGCTAAGTCACTCAGCATTCATCCAGTTCCAGATGATATCTTCCTCGTTCTCCTGACGTAGCTTCATGTAAGGCATGAGGACGAATTACAGCGCTGTAGGTGGGGAGAGATACCATTGCACGCGCTCGGCGCTCGAT
ATGTCGCAATATCTCCGTACTAAGTTGCCACTCGATCTGACTATAACCCGGTTCAGGCTTACCTTGTTCTCCAGGGCTCAGTCGATCAAGAGTAAGCGCGGTATTATCAGGCTGCCCGGGACACGCGGAACAGGTGCATGATGGCTTAACGAGAAC
TAGTCTGGAAGTAGTGCTGCGGCTAGCGCCAAGTTGGACTTGCGACATGATCGCGGATCCGGTAACTAATGTTACTGACATTGCATCTGGCCTATTCCCTCGTACTCCATTCGTTTTTTTTTGCCCCGGCAACGCGGCCTCATATACACGACCCGG
GGGTGTCACCAGAGGAATGGTCTTATGATAGGATTCTGAATCGGTGAACGTATGAAGCCGTACACCTACCATCCACAAGACCCCACTCCGCCCGGCGTCTCGTTCTCCAGTCTCTTCGTCTTCTTGTGGCTATAGAAGCTCTTCGGTGAACCAATC
CGTGGAACTTCACCTAAACCCGTGGATTGCAATTTGGGAACTAGGGTATAGACGGCAAATTAGCAGTTAGTGGCACGGGGCATATGATTTGGTCCACATTCTCTTGGCCGTCGAACGGTCAGTATAGGTTTACACACACGTATTCACTAGTCCTCC
ACACAAACAGAAAACACCTAGTTAACTCTTCATCAGACGAATTGAACAACCCAAGAGGTGCAGTTAGCTATCTGCTTTCATAGAAGTCATGACTAGTATGAGTTGCTGATCTGGTACTCCTCAGGTAAAGCCGGCGGTAATCGTTCATCGTTTCCC
AGATCGTCGGGGTTCTGAGTTACCGAGTTTTGACAATTGTATTTATGAGTTTAATATACTGAAGCCATGTGCCGGCGTGTATCTCTTCGGTTATCAGAGCTGGACCAGATGGGTTGCTAGTGCTGGTCCTCCCTACAGAAGTGGGCCTGTTGCTTG
CGTTATCAGTCCGATCGACGTTTCTGCAAGGGGACATCACTCTTTAATGCCTAGATTTCAACGCGATCGGAACCAAGACACCGCTACTAGTACTCCTCCCGTGGGAAATCTTAATACCACCTAGTGGGTTCAGCGTGTCACCGAGACGTCCTATAA
ATATGAAGCGTAGGGCTAGACGCGCAGCCGCATCTCAATGGTTGATATCACTGGTACTCCGAGACTACGACGTTACTTTGGCTAATAGAGGTTGACCAGCAGGCAGCCACACGCGGCCCGTCATAAGCGGTTACGGTTAAGCCGAAAAAAGTAAGT
CCAGCTAGCGCGATTAGCCACTGTCAACTCATATTTCCTTGGAGTCGTCTTCTGTCTGAAATATAGGCTTCTGCTGCGTTCCCCCGCTGGGAAGGCGCCTGTGAAGTAGTCAACTCATACTTCTCGTGCTCCCGTGTAAAGTTGGTAACATGCTTT
ACCGGCGGCCTGTGTGGGAGTATGTAAGTGCGCGGTCTTGGATTCTGACTCACCGGCGACTAGAACCCATGCTGTAGGGTGAAGGTTACAGTCGCACGCGACACCAATCGGCAGCCCGCGTCCTGGTTCTCCTGAGACTGGTCTTCGCCCTAAGTC
AAGACGTATTATTGGACAGACTTCCCACGATAGTTACAGGACATAGCTTCGGGTCTGGGATGATAGTTTCCCCCATGCACGCGTACCTCGTCCTCCCCCAACCCAAACGGGAAGGCTCAGCCAACGCAAGCATCTGAATTCGGGCAGCCTTAGAGC
GTCAAAACCTAGAACGAGATGCACTTCTAGTCCTCCTTAAGTAGCGCTTGAACGAAAGTCGATAGGCTTCCGCTGTGACCACGTCAGTGGCGGGGAACTGTCAACTAGAAGCGCCATTGTTAACTCCCTCTCCGCGCTTGTACAAGTTTCCCTGTT
AAACAACACTCGGCCTGGTTCTCCATGAGTGTAGGGGAATGGACAGCCCACGTTTTGCACCGACGTGTGAATCGTGCCATCACATTCCGCTGCATGCCGAAAATTACACCACCACAATGTTTTTACAACGGCCGCCCGGGGCGAGAGAGCCGCCAT
TGGGGTCAGCTTCGTGCGGTTGGGCCCGAGAACCCTCAGCCGTTTCTTACTATAGAAAAACGATGCGGCTATTACCTTGAGAGTAACAATTAAACATCAATAAGGACCAGTCGACGTCCCCAATCGAACTTGAGGATTGAGGGACTCTAGTACTCC
ACTACCATATTTCCCCAGAATTAGAGCCACCGCCACTTTAGTGCGAGAGATAAGATACTGTAGGCGGGAGCGGGAAAGAGGGTATGCTCGTGCTCCGTTTGGTGAACGATTCGTCCGAAACAAAAGTTAAAAGCAGCCTATCCTAACTTCTCGAGG
ACTCCTACCGGAAGCTTTGGCCACAATAATCCCGGGACCCTCCTGGTATAATTGTTAATCTAACCGTTGCGTTTTGCCTCACGCACCACATATCGCTCGACCGAAAGCTTCTCGTTCTCCTTCACGAGTGTTCGTTCACGACATGGAAGCTCGGGA
ATCGCATTGCTTAACAGTGCTGGCATACAGCCTGTATCTAACGGCTATCAACTTATTCAGCATTTAGTGATAATTCTAAACCGAAAAGGATGTCATTACTCGTACTCCGCTATGAGTAACACCGCAATTGCGTGAACACATTTAATCACACATCAC
GACGTTTGGTCCATCTAGTACTCCTTTGGCATAAACGACCGGAATTTTTCGCAATCTGACTCGGGACTTATCAACGAAGCCAACCATGGCTGACGCTGTGGCAATTGATATCACTACCCCTAAAGTTTGGGGATTAGTTAATATTCAAGTCGCTCA
AGTTACAGTGGCTTGTCGGAATTTTCCTCGTCCTCCGGATACGCCGCAGTCTTACTAGGATCGTTGCGGCTCTCTCTTCTTGTCCCGAAGGCGCGCTAGATCAAAACCACACCAGGGGGAGCGGTGAGATTGTAGGCGTCGCGATCCAGCGGAGAT
AGCTTCTATCCTCGCGTGGACGGATTGGAGAATCACAATTCCATGGCTATCTGGTTCTCCCAGATCCAACATGGTGTCGTATCCCGCCTGTAGACGAGCTGTTGGGAAGCACGGCCGTGACAAGTTCCTCACGTACAAGCTTGTCCTTTTACCGCC""",12,25))






