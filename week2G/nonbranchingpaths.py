def presuf(A):
    A=A.split("\n")
    kmers = A
    nodes=[]
    for i in range(0,len(A)):
        nodes.append(A[i].split('|')[0][:-1] + '|' + A[i].split('|')[1][:-1])
    nodes=list(set(nodes))
    nodes.sort()
    adjlist={}
    for i in nodes:
        List=[]
        for j in kmers:
            if i == (j.split('|')[0][:-1] + '|' + j.split('|')[1][:-1]):#[suffix==preffis]
                List.append(j.split('|')[0][1:]+ '|' + j.split('|')[1][1:])
        adjlist[i]=List
    return adjlist 

def out(i,vertex):
    if i in vertex.keys():
        k=len(vertex[i])
        return k
    else: 
        return 0

def indeg(i,vertex):
    k=0
    for j in vertex:
        if len(vertex[j])>1:
           if i in vertex[j]:
               y=vertex[j].count(i)
               k=k+y
        else:
            if i in vertex[j]:
                k=k+1
    return k 

def inputgraph(Dna):
    vertex={}
    Dna=Dna.split("\n")
    for i in Dna:
        vertex[i.split(' -> ')[0]]=i.split(' -> ')[1].split(',')
    return vertex

def MaximalNonBranchingPaths(Grap):
    path=[]
    for i in Grap.keys():
        if not(indeg(i,Grap)==1 and out(i,Grap)==1):
            if out(i,Grap)>0:
                for j in Grap[i]:
                    NonBranchingPath = [i,j]
                    while indeg(j,Grap)==1 and out(j,Grap)==1:
                        NonBranchingPath.extend(Grap[j])
                        j=Grap[j][0]
                    path.extend([NonBranchingPath])    
    for i in path:#eliminating nodes that are already used for it to be isolated cycles
        for j in range(0,len(i)-1):## the left one i[j] the rigt one i[j+1]
            d=Grap[i[j]]
            if i[j+1] in d:
                d.remove(i[j+1]) 
            Grap[i[j]]=d
    for i in Grap.keys():
        if out(i,Grap)==1 and indeg(i,Grap)==1 :
            for j in Grap[i]:
                NonBranchingPath = [i,j]
                while indeg(j,Grap)==1 and out(j,Grap)==1:
                    if Grap[j][0] in NonBranchingPath:
                        pass
                    else:
                        NonBranchingPath.append(Grap[j][0])
                    j=Grap[j][0]
                    if NonBranchingPath[0]==Grap[j][0]:
                        NonBranchingPath.append(Grap[j][0])
                        break
                if NonBranchingPath in path:
                    pass
                else:
                    path.extend([NonBranchingPath])
                    for i in range(0,len(NonBranchingPath)-1):
                        d=Grap[NonBranchingPath[i]]
                        if NonBranchingPath[i+1] in d:
                            d.remove(NonBranchingPath[i+1])
                        Grap[NonBranchingPath[i]]=d
    return path

A=MaximalNonBranchingPaths(inputgraph('''0 -> 152
1 -> 297
2 -> 367
3 -> 227
4 -> 315
5 -> 307
6 -> 285
7 -> 35
8 -> 2,318
9 -> 103
10 -> 154
11 -> 164
12 -> 22
13 -> 347
14 -> 295
15 -> 381
16 -> 309
17 -> 113
18 -> 46
19 -> 360
20 -> 218
21 -> 179
22 -> 244
23 -> 323
24 -> 359
25 -> 131
26 -> 76
27 -> 39
28 -> 224
29 -> 134
30 -> 211
31 -> 221
32 -> 70
33 -> 237
34 -> 122
35 -> 379
36 -> 214
37 -> 317
38 -> 324
39 -> 258
40 -> 48
41 -> 391
42 -> 173
43 -> 282
44 -> 196
45 -> 174
46 -> 7
47 -> 50
48 -> 252
49 -> 105
50 -> 118
51 -> 182
52 -> 240
53 -> 99
54 -> 219
55 -> 17
56 -> 321
57 -> 0
58 -> 363
59 -> 231
60 -> 55
61 -> 208
62 -> 273
63 -> 74
64 -> 155
65 -> 371
66 -> 15
67 -> 14
68 -> 349
69 -> 333
70 -> 254
71 -> 328
72 -> 29
73 -> 177
74 -> 133,66
75 -> 246
76 -> 143
77 -> 355
78 -> 89
79 -> 44
80 -> 393
81 -> 277
82 -> 357
83 -> 380
84 -> 124
85 -> 232
86 -> 346
87 -> 223
88 -> 398
89 -> 253
90 -> 259
91 -> 236
92 -> 284
93 -> 156
94 -> 216
95 -> 261
96 -> 290
97 -> 117,176
98 -> 137
99 -> 165
100 -> 16
101 -> 296,135
102 -> 171
103 -> 79
104 -> 331
105 -> 339
106 -> 204,161
107 -> 166
108 -> 71
109 -> 257
110 -> 116
111 -> 170
112 -> 345
113 -> 300,42
114 -> 34
115 -> 305
116 -> 57,0
117 -> 207
118 -> 63
119 -> 160
120 -> 115
121 -> 325
122 -> 239
123 -> 354
124 -> 66
125 -> 163
126 -> 326
127 -> 234
128 -> 126
129 -> 41
130 -> 260
131 -> 368
132 -> 392
133 -> 109
134 -> 291
135 -> 23
136 -> 121
137 -> 45
138 -> 10
139 -> 272
140 -> 241
141 -> 185
142 -> 200
143 -> 190
144 -> 146
145 -> 151,335
146 -> 268
147 -> 125
148 -> 3
149 -> 37
150 -> 178
151 -> 364
152 -> 49
153 -> 375
154 -> 243
155 -> 144
156 -> 168
157 -> 206
158 -> 394
159 -> 24
160 -> 386
161 -> 287
162 -> 301
163 -> 289
164 -> 319
165 -> 280
166 -> 275
167 -> 111,385
168 -> 310
169 -> 395
170 -> 198
171 -> 397
172 -> 110
173 -> 220
174 -> 189
175 -> 6
176 -> 38
177 -> 175
178 -> 265,391
179 -> 348
180 -> 337
181 -> 120
182 -> 276
183 -> 217
184 -> 387
185 -> 132
186 -> 382
187 -> 40
188 -> 267
189 -> 327
190 -> 353
191 -> 162
192 -> 385
193 -> 123
194 -> 80
195 -> 281
196 -> 312
197 -> 86
198 -> 139
199 -> 161
200 -> 313
201 -> 85
202 -> 136
203 -> 366
204 -> 332
205 -> 197
206 -> 336
207 -> 176
208 -> 215
209 -> 36
210 -> 373
211 -> 399
212 -> 158
213 -> 251
214 -> 153
215 -> 270
216 -> 274
217 -> 149
218 -> 293
219 -> 304
220 -> 107
221 -> 53
222 -> 135
223 -> 83
224 -> 87
225 -> 1
226 -> 12
227 -> 169
228 -> 248
229 -> 20
230 -> 4
231 -> 30
232 -> 299
233 -> 222
234 -> 264
235 -> 141
236 -> 228
237 -> 266
238 -> 245
239 -> 52
240 -> 97
241 -> 314
242 -> 356
243 -> 286
244 -> 203
245 -> 318
246 -> 140
247 -> 365
249 -> 93
250 -> 191
251 -> 188,177
252 -> 9
253 -> 362
254 -> 180
255 -> 351
256 -> 56
257 -> 61
258 -> 233
259 -> 340
260 -> 195
261 -> 311
262 -> 202
263 -> 67
264 -> 187
265 -> 193
266 -> 75
267 -> 90
268 -> 92
269 -> 11
270 -> 344
271 -> 262
272 -> 192
273 -> 60
274 -> 78,156
275 -> 96
276 -> 69
277 -> 283
278 -> 298
279 -> 147
280 -> 106
281 -> 145
282 -> 278
283 -> 43
284 -> 370
285 -> 255
286 -> 269
287 -> 343
288 -> 322
289 -> 320
290 -> 33,140
291 -> 54
292 -> 209
293 -> 18
294 -> 199
295 -> 341
296 -> 229
297 -> 32
298 -> 201
299 -> 372
300 -> 384
301 -> 28
302 -> 294
303 -> 306
304 -> 256
305 -> 128
306 -> 389
307 -> 58
308 -> 316
309 -> 350
310 -> 263
311 -> 129
312 -> 68
313 -> 114
314 -> 64
315 -> 361
316 -> 13
317 -> 47
318 -> 65
319 -> 26
320 -> 42
321 -> 51
322 -> 210
323 -> 388
324 -> 31
325 -> 335
326 -> 205
327 -> 172
328 -> 383
329 -> 213
330 -> 5
331 -> 100
332 -> 225
333 -> 330
334 -> 27
335 -> 288
336 -> 119
337 -> 369
338 -> 247
339 -> 308
340 -> 377
341 -> 142
342 -> 302
343 -> 183
344 -> 84
345 -> 352
346 -> 104
347 -> 226
348 -> 130
349 -> 303
350 -> 102
351 -> 159
352 -> 59
353 -> 150
354 -> 95
355 -> 230
356 -> 212
357 -> 374
358 -> 25
359 -> 91
360 -> 376
361 -> 396
362 -> 249
363 -> 72
364 -> 271
365 -> 8
366 -> 138,353
367 -> 235
368 -> 148
369 -> 342
370 -> 98
371 -> 194
372 -> 112
373 -> 62
374 -> 329
375 -> 338
376 -> 292
377 -> 73
378 -> 250
379 -> 334
380 -> 358
381 -> 21
382 -> 88
383 -> 167
384 -> 279
385 -> 77
386 -> 242
387 -> 127
388 -> 108
389 -> 184
390 -> 101
391 -> 19
392 -> 238
393 -> 186
394 -> 390
395 -> 378
396 -> 94
397 -> 181
398 -> 82
399 -> 81'''))
for i in A:
    print('->'.join(i))



    


